// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens WHERE id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, id)
	return err
}

const deleteRefreshTokensByUserId = `-- name: DeleteRefreshTokensByUserId :exec
DELETE FROM refresh_tokens WHERE user_id = $1
`

func (q *Queries) DeleteRefreshTokensByUserId(ctx context.Context, userID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokensByUserId, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one

SELECT id, token, expires_at, created_at, user_id, ip_address, device FROM refresh_tokens WHERE id = $1
`

// Return the generated ID
func (q *Queries) GetRefreshToken(ctx context.Context, id int64) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserID,
		&i.IpAddress,
		&i.Device,
	)
	return i, err
}

const storeRefreshToken = `-- name: StoreRefreshToken :exec
INSERT INTO refresh_tokens (token, user_id, expires_at, ip_address, device)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type StoreRefreshTokenParams struct {
	Token     string           `json:"token"`
	UserID    pgtype.Int8      `json:"user_id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	IpAddress pgtype.Text      `json:"ip_address"`
	Device    pgtype.Text      `json:"device"`
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, storeRefreshToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.Device,
	)
	return err
}
